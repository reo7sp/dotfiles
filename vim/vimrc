set nocompatible

language en_US
language messages en_US
language ctype en_US
language time en_US
set langmenu=en_US
let $LANG = 'en_US'

let mapleader = ","


" plugins
call plug#begin('~/.vim/bundle')

" " generic
Plug 'Shougo/vimproc.vim', {'do': 'make'}
if has('nvim')
  Plug 'nvim-lua/plenary.nvim'
  Plug 'kkharji/sqlite.lua'
endif
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-repeat'

" " editing
if has('nvim') || has('patch-9.0.0438')
  Plug 'neoclide/coc.nvim', {'branch': 'release'}
  let g:coc_global_extensions = ['coc-json', 'coc-yaml', 'coc-sh', 'coc-pyright', 'coc-go', 'coc-lua', 'coc-html', 'coc-css', 'coc-tsserver', 'coc-docker']
else
  Plug 'vim-scripts/AutoComplPop'
endif
Plug 'Raimondi/delimitMate'
Plug 'tpope/vim-sleuth'
Plug 'junegunn/vim-slash'
if has('nvim')
  Plug 'Pocco81/auto-save.nvim'
endif
Plug 'ConradIrwin/vim-bracketed-paste'
Plug 'ntpeters/vim-better-whitespace'
if has('nvim')
  Plug 'gbprod/yanky.nvim'
  Plug 'debugloop/telescope-undo.nvim'
else
  Plug 'maxbrunsfeld/vim-yankstack'
endif
Plug 'scrooloose/nerdcommenter'
Plug 'pbrisbin/vim-mkdir'

" " navigation
Plug 'justinmk/vim-sneak'
Plug 'tpope/vim-unimpaired'
Plug 'vim-airline/vim-airline'
Plug 'ap/vim-buftabline'
Plug 'airblade/vim-gitgutter'
Plug 'moll/vim-bbye'
Plug 'vim-scripts/BufOnly.vim'
if has('nvim')
  Plug 'nvim-telescope/telescope.nvim', {'tag': '0.1.8'}
  Plug 'smartpde/telescope-recent-files'
endif
if has('nvim') || has('patch-8.1.0994')
  Plug 'lambdalisue/vim-fern'
  Plug 'lambdalisue/vim-fern-hijack'
  Plug 'lambdalisue/vim-fern-git-status'
endif
Plug 'tpope/vim-fugitive'

" " appearance
Plug 'sainnhe/sonokai'
Plug 'ekalinin/Dockerfile.vim'
Plug 'vim-scripts/nginx.vim'
Plug 'johejo/gomod.vim'

call plug#end()


" plugin settings
" " neoclide/coc.vim
let g:coc_disable_startup_warning = 1

if has('nvim') || has('patch-9.0.0438')
  call coc#config('suggest.noselect', 'true')

  inoremap <silent><expr> <TAB>
        \ coc#pum#visible() ? coc#pum#next(1) :
        \ CheckBackspace() ? "\<Tab>" :
        \ coc#refresh()
  inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"
  inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                                \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
  function! CheckBackspace() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
  endfunction
  if has('nvim')
    inoremap <silent><expr> <c-space> coc#refresh()
  else
    inoremap <silent><expr> <c-@> coc#refresh()
  endif

  nmap <silent> gd <Plug>(coc-definition)
  nmap <silent> gy <Plug>(coc-type-definition)
  nmap <silent> gi <Plug>(coc-implementation)
  nmap <silent> gr <Plug>(coc-references)
  nmap <silent> [g <Plug>(coc-diagnostic-prev)
  nmap <silent> ]g <Plug>(coc-diagnostic-next)
  nnoremap <silent> K :call ShowDocumentation()<CR>
  function! ShowDocumentation()
    if CocAction('hasProvider', 'hover')
      call CocActionAsync('doHover')
    else
      call feedkeys('K', 'in')
    endif
  endfunction
  autocmd CursorHold * silent call CocActionAsync('highlight')

  xmap if <Plug>(coc-funcobj-i)
  omap if <Plug>(coc-funcobj-i)
  xmap af <Plug>(coc-funcobj-a)
  omap af <Plug>(coc-funcobj-a)
  xmap ic <Plug>(coc-classobj-i)
  omap ic <Plug>(coc-classobj-i)
  xmap ac <Plug>(coc-classobj-a)
  omap ac <Plug>(coc-classobj-a)

  command! -nargs=? Fold :call CocAction('fold', <f-args>)
  command! -nargs=0 Format :call CocActionAsync('format')
  command! -nargs=0 FormatImports :call CocActionAsync('runCommand', 'editor.action.organizeImport')

  set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

  nnoremap <leader>fs <cmd>CocList outline<cr>
  nnoremap <leader>fa <cmd>CocList symbols<cr>
  nnoremap <leader>flc <cmd>CocList commands<cr>
endif

" " junegunn/vim-slash
noremap <plug>(slash-after) zz

" " Pocco81/auto-save.nvim
if has('nvim')
  lua require('auto-save').setup({})
endif

" " gbprod/yanky.nvim or maxbrunsfeld/vim-yankstack
if has('nvim')
  lua require('yanky').setup({})

  lua vim.keymap.set({"n","x"}, "p", "<Plug>(YankyPutAfter)")
  lua vim.keymap.set({"n","x"}, "P", "<Plug>(YankyPutBefore)")
  lua vim.keymap.set({"n","x"}, "gp", "<Plug>(YankyGPutAfter)")
  lua vim.keymap.set({"n","x"}, "gP", "<Plug>(YankyGPutBefore)")
  lua vim.keymap.set("n", "[y", "<Plug>(YankyPreviousEntry)")
  lua vim.keymap.set("n", "]y", "<Plug>(YankyNextEntry)")
else
  let g:yankstack_map_keys = 0

  nnoremap ]y <Plug>yankstack_substitute_older_paste
  nnoremap [y <Plug>yankstack_substitute_newer_paste
endif

" " scrooloose/nerdcommenter
nnoremap <C-/> <Plug>NERDCommenterToggle
nnoremap <C-_> <Plug>NERDCommenterToggle

" " justinmk/vim-sneak
autocmd VimEnter * noremap s <Plug>Sneak_s

let g:sneak#use_ic_scs = 1

" " vim-airline/vim-airline
let g:airline#extensions#whitespace#enabled = 0

" " nvim-telescope/telescope.nvim
if has('nvim')
  lua require('telescope').setup({ defaults = require('telescope.themes').get_ivy() })
  lua require('telescope').load_extension('recent_files')
  lua require('telescope').load_extension('yank_history')
  lua require('telescope').load_extension('undo')

  nnoremap <leader>ff <cmd>lua require('telescope.builtin').find_files()<cr>
  nnoremap <leader>fe <cmd>lua require('telescope').extensions.recent_files.pick({only_cwd = true})<cr>
  nnoremap <leader>fg <cmd>lua require('telescope.builtin').live_grep()<cr>
  nnoremap <leader>fb <cmd>lua require('telescope.builtin').buffers()<cr>
  nnoremap <leader>fj <cmd>lua require('telescope.builtin').jumplist()<cr>
  nnoremap <leader>fy <cmd>lua require('telescope').extensions.yank_history.yank_history()<cr>
  nnoremap <leader>fu <cmd>lua require('telescope').extensions.undo.undo()<cr>
  nnoremap <leader>fc <cmd>lua require('telescope.builtin').commands()<cr>
  nnoremap <leader>f/ <cmd>Telescope<cr>
endif

" " lambdalisue/vim-fern
let g:fern#default_hidden = 1

nnoremap <leader>t :Fern . -drawer -stay -toggle -reveal=%<CR>

function! s:init_fern() abort
  set nornu
  set nonu

  nmap <buffer> e <Plug>(fern-action-open:edit)
  nmap <buffer> ge <Plug>(fern-action-open:edit)<C-w>p
  nmap <buffer> o <Plug>(fern-action-open:edit)
  nmap <buffer> go <Plug>(fern-action-open:edit)<C-w>p
  nmap <buffer> i <Plug>(fern-action-open:split)
  nmap <buffer> gi <Plug>(fern-action-open:split)<C-w>p
  nmap <buffer> s <Plug>(fern-action-open:vsplit)
  nmap <buffer> gs <Plug>(fern-action-open:vsplit)<C-w>p
  nmap <buffer> c <Plug>(fern-action-enter)
  nmap <buffer> u <Plug>(fern-action-leave)
  nmap <buffer> I <Plug>(fern-action-hidden-toggle)
  nmap <buffer> q :<C-u>quit<CR>

  nmap <buffer><expr>
      \ <Plug>(fern-my-expand-or-collapse)
      \ fern#smart#leaf(
      \   "\<Plug>(fern-action-collapse)",
      \   "\<Plug>(fern-action-expand)",
      \   "\<Plug>(fern-action-collapse)",
      \ )

  nmap <buffer><nowait> <CR> <Plug>(fern-my-expand-or-collapse)

  nnoremap <buffer> <C-J> <C-W><C-J>
  nnoremap <buffer> <C-K> <C-W><C-K>
  nnoremap <buffer> <C-L> <C-W><C-L>
  nnoremap <buffer> <C-H> <C-W><C-H>
endfunction

augroup fern-custom
  autocmd! *
  autocmd FileType fern call s:init_fern()
augroup END


" vim mappings
nnoremap j gj
nnoremap k gk

cnoreabbrev w!! w !sudo tee % >/dev/null
cnoreabbrev Wqa wqa
cnoreabbrev Qa qa
cnoreabbrev Q q

nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

nnoremap <C-S> :w<CR>
inoremap <C-S> <Esc>:w<CR>l
vnoremap <C-S> <Esc>:w<CR>

cnoreabbrev bq Bdelete
cnoreabbrev bqo BufOnly

noremap <leader>y "+y
noremap <leader>Y "+Y
noremap <leader>p "+p
noremap <leader>P "+P

nnoremap <C-P> :bp<CR>
nnoremap <C-N> :bn<CR>
nnoremap <leader>1 <Plug>BufTabLine.Go(1)
nnoremap <leader>2 <Plug>BufTabLine.Go(2)
nnoremap <leader>3 <Plug>BufTabLine.Go(3)
nnoremap <leader>4 <Plug>BufTabLine.Go(4)
nnoremap <leader>5 <Plug>BufTabLine.Go(5)
nnoremap <leader>6 <Plug>BufTabLine.Go(6)
nnoremap <leader>7 <Plug>BufTabLine.Go(7)
nnoremap <leader>8 <Plug>BufTabLine.Go(8)
nnoremap <leader>9 <Plug>BufTabLine.Go(9)
nnoremap <leader>0 <Plug>BufTabLine.Go(-1)


" colors
syntax enable
set background=dark
set t_Co=256
if has('termguicolors')
  set termguicolors
endif

let g:sonokai_enable_italic = 1

colorscheme sonokai
let g:airline_theme = 'sonokai'

set colorcolumn=80,120

" vim settings
" " editor appearance
set number
set relativenumber
set cul
set showmatch
set scrolloff=5
set sidescrolloff=5

set shiftwidth=4
set tabstop=4
set softtabstop=4
set expandtab

set mat=2

set shortmess+=aIT
if has("patch-7.4.314")
  set shortmess+=c
endif
set title
set confirm
set more
set ruler
set showmode
set showcmd

set foldenable
set foldmethod=syntax
set foldlevelstart=99

set nowrap
set linebreak
if exists('+breakindent')
  set breakindent
endif
set showbreak=+++\ 

" " gvim
set guioptions=gi

" " navigation
set incsearch
set hlsearch
set ignorecase
set smartcase

set magic

set wildmenu
set wildmode=longest:full,full
set wildignore+=*.o,*~,*.pyc,.git/*,*.meta,.sync/*

set nostartofline

" " editing
set autoindent
set copyindent
set smartindent
set smarttab

set nrformats-=octal

set viewoptions=folds,cursor,unix,slash

set backspace=eol,start,indent
set whichwrap+=<,>,h,l

set completeopt=longest,menuone,preview
set splitright
set splitbelow
if exists('+signcolumn')
  set signcolumn=yes
endif

set modeline
set modelines=5

set undofile
set autoread
set autowriteall
set nobackup
set nowritebackup

set nospell

set updatetime=300

" " encoding
set encoding=utf-8
set fileencoding=utf-8
set fileencodings=utf-8,cp1251,latin1
set fileformats=unix,dos,mac

" " russian support
set keymap=russian-jcukenwin
set spelllang=ru_yo,en_us
set iskeyword=@,48-57,_,192-255
set langmap=ёйцукенгшщзхъфывапролджэячсмитьбюЙЦУКЕHГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮ;`qwertyuiop[]asdfghjkl\\;'zxcvbnm\\,.QWERTYUIOP{}ASDFGHJKL:\\"ZXCVBNM<>
set iminsert=0
set imsearch=0

" " other
set backupdir=~/.vim/backup
set directory=~/.vim/tmp
set undodir=~/.vim/undo
set viewdir=~/.vim/view
if &shell =~# 'fish$'
  set shell=/bin/bash
endif

set mouse=i
set hidden
set lazyredraw
set noerrorbells
set novisualbell
set history=700
set ttyfast
set timeout
set timeoutlen=1000
set ttimeout
set ttimeoutlen=10


" neovide
if exists('g:neovide')
  set guifont=Jetbrains\ Mono:h14
  set linespace=1

  lua vim.g.neovide_hide_mouse_when_typing = true
  lua vim.g.neovide_position_animation_length = 0
  lua vim.g.neovide_cursor_animation_length = 0.00
  lua vim.g.neovide_cursor_trail_size = 0
  lua vim.g.neovide_cursor_animate_in_insert_mode = false
  lua vim.g.neovide_cursor_animate_command_line = false
  lua vim.g.neovide_scroll_animation_far_lines = 0
  lua vim.g.neovide_scroll_animation_length = 0.00

  lua vim.keymap.set('n', '<D-s>', ':w<CR>')
  lua vim.keymap.set('v', '<D-c>', '"+y')
  lua vim.keymap.set('n', '<D-v>', '"+P')
  lua vim.keymap.set('v', '<D-v>', '"+P')
  lua vim.keymap.set('c', '<D-v>', '<C-R>+')
  lua vim.keymap.set('i', '<D-v>', '<ESC>l"+Pli')
  lua vim.api.nvim_set_keymap('', '<D-v>', '+p<CR>', { noremap = true, silent = true })
  lua vim.api.nvim_set_keymap('!', '<D-v>', '<C-R>+', { noremap = true, silent = true })
  lua vim.api.nvim_set_keymap('t', '<D-v>', '<C-R>+', { noremap = true, silent = true })
  lua vim.api.nvim_set_keymap('v', '<D-v>', '<C-R>+', { noremap = true, silent = true })
end
